{"version":3,"sources":["SingleMessage/SingleMessage.jsx","Form/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["SingleMessage","_ref","email","text","id","react_default","a","createElement","Message","Header","as","style","fontSize","color","Forms","handlerChange","postMessage","handleKeyDown","Form","onSubmit","Field","placeholder","type","value","onChange","name","TextArea","onKeyDown","Button","positive","App","state","messages","messagesLength","error","page","messageId","singleMessage","seachError","e","_this","setState","Object","defineProperty","target","keyCode","getAllMessages","axios","get","then","data","Math","ceil","length","catch","err","getMessagesByPage","concat","preventDefault","message","sendMessageToDb","post","checkMessagesLength","_callee","regenerator_default","wrap","_context","prev","next","floor","stop","this","showNewPage","_callee2","_context2","persist","getMessageById","checkMessageFoundById","removeSingleMessage","_this$state","className","content","Pagination","activePage","firstItem","lastItem","pointing","secondary","onClick","totalPages","display","alignItems","justyfyContent","marginTop","negative","Item","textAlign","Segment","padding","Dimmer","active","inverted","Loader","map","el","src_SingleMessage_SingleMessage","key","_id","Form_Form","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bfa6650.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Header, Message } from 'semantic-ui-react'\r\n\r\nconst SingleMessage = ({email, text, id}) => (\r\n  <div>\r\n    <Message>\r\n      <Header as='h4'>{email}</Header>\r\n      <p style={{fontSize: '17px'}}>\r\n       {text}\r\n      </p>\r\n      <span style={{color: 'grey'}}>message id:  {id}</span>\r\n    </Message>\r\n  </div>\r\n)\r\n\r\nexport default SingleMessage\r\n","import React from 'react'\r\nimport { Button, Form, TextArea } from 'semantic-ui-react'\r\n\r\nconst Forms = ({email, text, handlerChange, postMessage, handleKeyDown}) => (\r\n  <Form onSubmit={postMessage}>\r\n   <Form.Field >\r\n      <input placeholder='Email'  type='text' value={email} onChange={handlerChange} name='email'/>\r\n    </Form.Field>\r\n    <Form.Field>\r\n      <TextArea placeholder='Text' type='text' value={text} onChange={handlerChange} name='text' onKeyDown={handleKeyDown}/>\r\n    </Form.Field>\r\n    <Button positive type='submit'>Submit</Button>\r\n  </Form>\r\n)\r\n\r\nexport default Forms\r\n","import React, { Component } from 'react'\r\nimport { Header, Dimmer, Loader, Segment, Pagination, Item, Form, Button } from 'semantic-ui-react'\r\nimport SingleMessage from './SingleMessage/SingleMessage'\r\nimport Forms from './Form/Form'\r\nimport './App.css'\r\nimport axios from 'axios'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = { \r\n    messages: null,\r\n    messagesLength: 0,\r\n    error: '',\r\n    page: 1,\r\n    email: '',\r\n    text: '',\r\n    messageId: '',\r\n    singleMessage: null,\r\n    seachError: '',\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAllMessages()\r\n    this.getMessagesByPage(this.state.page)\r\n  }\r\n\r\n  handlerChange = (e) => {\r\n    this.setState({\r\n       [e.target.name] : e.target.value\r\n    })\r\n  }\r\n\r\n  handleKeyDown = (e) => {\r\n    if (e.keyCode === 13) {\r\n        this.postMessage(e);\r\n    }\r\n  }\r\n\r\n  getAllMessages = () => {\r\n    axios.get(`/api/messages`)\r\n      .then(data => this.setState({messagesLength: Math.ceil(data.data.length/10)}))\r\n      .catch(err => this.setState({error: err}))\r\n  }\r\n\r\n  getMessagesByPage = () => {\r\n    axios.get(`/api/messages/list/${this.state.page}`)\r\n      .then(data => this.setState({messages: data.data}))\r\n      .catch(err => this.setState({error: err}))\r\n  }\r\n\r\n  postMessage = (e) => {\r\n    e.preventDefault()\r\n    let message = {\r\n      email: this.state.email,\r\n      text: this.state.text,\r\n    }\r\n   this.sendMessageToDb(message)\r\n  }\r\n\r\n  sendMessageToDb = (message) => {\r\n    axios.post('/api/messages', message)\r\n      .then(data => this.checkMessagesLength(data.data))\r\n      .catch(() => this.setState({error: 'Validation faild! Your email isn\\'t correct or message length more then 100 symbols, try again.'}))\r\n  } \r\n\r\n  checkMessagesLength = async() => {\r\n      await this.setState(prev =>({\r\n        email: '',\r\n        text: '',\r\n        error: '',\r\n        page: prev.messages.length === 10 && prev.page === prev.messagesLength ? prev.page+1 : prev.messagesLength,\r\n        messagesLength: prev.messages.length === 10 && prev.messagesLength === prev.page ? Math.floor(prev.messagesLength+1) : prev.messagesLength,\r\n      }))\r\n      this.getMessagesByPage()\r\n  }\r\n\r\n  showNewPage = async(e) => {\r\n    e.persist()\r\n    if (e.target.type === 'pageItem'){\r\n     await this.setState({\r\n       page: +e.target.text\r\n     })\r\n   } else if (e.target.type === 'nextItem') {\r\n     if(this.state.page < this.state.messagesLength) {\r\n       await this.setState(prev => ({\r\n        page: prev.page+1\r\n      }))\r\n     }\r\n   } else if (e.target.type === 'prevItem') {\r\n     if(this.state.page > 1) {\r\n      await this.setState(prev => ({\r\n        page: prev.page-1\r\n      }))\r\n     }\r\n   }\r\n   this.getMessagesByPage()\r\n  }\r\n\r\n  getMessageById=()=> {\r\n    if(this.state.messageId){\r\n      axios.get(`/api/messages/single/${this.state.messageId}`)\r\n      // .then(data => console.log(data))\r\n      .then(data => this.checkMessageFoundById(data.data))\r\n      .catch(() => this.setState({seachError: 'Sorry, it\\'s not ID, try again.'}))\r\n    }\r\n  }\r\n\r\n  checkMessageFoundById = (data) => {\r\n    if (data) {\r\n      this.setState({\r\n        singleMessage: [data], \r\n        seachError: ''})\r\n    } else {\r\n      this.setState({\r\n        seachError: 'Sorry, no message with this ID, try again.'\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  removeSingleMessage=()=>{\r\n    this.setState({\r\n      singleMessage: null,\r\n      messageId: '',\r\n      seachError: '',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { page, messages, error, email, text, messagesLength, messageId, singleMessage, seachError } = this.state\r\n    return (\r\n      <div className='wrapper'>\r\n        <div className='main-title'> \r\n          <Header as='h2' content='Test DB2 Limited'/>\r\n        </div>\r\n        <div className='pagin-wrap'>\r\n          <Pagination\r\n          activePage={page}\r\n          firstItem={null}\r\n          lastItem={null}\r\n          pointing\r\n          secondary\r\n          onClick={this.showNewPage}\r\n          totalPages={messagesLength}\r\n          />\r\n        </div>\r\n        <div className='seach-wrapper'>\r\n          <Form style={{display:'flex', alignItems: 'center', justyfyContent: 'space-evenly'}}>\r\n            <Form.Field style={{marginTop:'1rem'}}>\r\n              <input value={messageId} placeholder='Get Message By ID' name='messageId' onChange={this.handlerChange}/>\r\n            </Form.Field>\r\n            <Button positive type='submit' onClick={this.getMessageById}>Seach</Button>\r\n            <Button negative onClick={this.removeSingleMessage}>Reset</Button>\r\n          </Form>\r\n          <Item style={{color:'red', textAlign: 'center'}}>{seachError}</Item> \r\n        </div>\r\n        <div className='message-wrapper'>\r\n          { messages === null ? \r\n              <Segment style={{padding: '13.8rem 0'}}>\r\n                    <Dimmer active inverted>\r\n                        <Loader inverted> Loading ...</Loader>\r\n                    </Dimmer>\r\n                </Segment>:\r\n            !singleMessage && messages.length !== 0 ? messages.map(el => <SingleMessage key={el._id} id={el._id} email={el.email} text={el.text}/>) : singleMessage ? singleMessage.map(el => <SingleMessage key={el._id} id={el._id} email={el.email} text={el.text}/>) : <div style={{color:'red', textAlign: 'center'}}> No messages yet</div>\r\n          }\r\n          <Item className='error'>{error}</Item> \r\n        </div>\r\n        <div className='form-wrapper'> \r\n          <Forms email={email} text={text} handlerChange={this.handlerChange} handleKeyDown={this.handleKeyDown} postMessage={this.postMessage}/>\r\n        </div>\r\n      </div>    \r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n            <App />\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}