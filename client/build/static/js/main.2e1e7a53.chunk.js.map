{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","messages","messagesLength","error","page","email","text","messageId","singleMessage","seachError","handlerChange","e","_this","setState","Object","defineProperty","target","name","value","handleKeyDown","keyCode","postMessage","getAllMessages","axios","get","then","data","Math","ceil","length","catch","err","getMessagesByPage","concat","preventDefault","message","sendMessageToDb","post","checkMessagesLength","_callee","regenerator_default","a","wrap","_context","prev","next","toConsumableArray","floor","stop","this","showNewPage","_callee2","_context2","persist","type","getMessageById","removeSingleMessage","_this$state","react_default","createElement","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sXA4KeA,6MAlKbC,MAAQ,CACNC,SAAU,KACVC,eAAgB,EAChBC,MAAO,GACPC,KAAM,EACNC,MAAO,GACPC,KAAM,GACNC,UAAW,GACXC,cAAe,KACfC,WAAY,MAQdC,cAAgB,SAACC,GACfC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACIH,EAAEK,OAAOC,KAAQN,EAAEK,OAAOE,WAIhCC,cAAgB,SAACR,GACG,KAAdA,EAAES,SACFR,EAAKS,YAAYV,MAIvBW,eAAiB,WACfC,IAAMC,IAAN,sCACGC,KAAK,SAAAC,GAAI,OAAId,EAAKC,SAAS,CAACX,eAAgByB,KAAKC,KAAKF,EAAKA,KAAKG,OAAO,QACvEC,MAAM,SAAAC,GAAG,OAAInB,EAAKC,SAAS,CAACV,MAAO4B,SAGxCC,kBAAoB,WAClBT,IAAMC,IAAN,2CAAAS,OAAqDrB,EAAKZ,MAAMI,OAC7DqB,KAAK,SAAAC,GAAI,OAAId,EAAKC,SAAS,CAACZ,SAAUyB,EAAKA,SAC3CI,MAAM,SAAAC,GAAG,OAAInB,EAAKC,SAAS,CAACV,MAAO4B,SAGxCV,YAAc,SAACV,GACbA,EAAEuB,iBACF,IAAIC,EAAU,CACZ9B,MAAOO,EAAKZ,MAAMK,MAClBC,KAAMM,EAAKZ,MAAMM,MAEpBM,EAAKwB,gBAAgBD,MAGtBC,gBAAkB,SAACD,GACjBZ,IAAMc,KAAK,sCAAuCF,GAC/CV,KAAK,SAAAC,GAAI,OAAId,EAAK0B,oBAAoBZ,EAAKA,QAC3CI,MAAM,kBAAMlB,EAAKC,SAAS,CAACV,MAAO,wGAGvCmC,0DAAsB,SAAAC,EAAMJ,GAAN,OAAAK,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,YAChBjC,EAAKZ,MAAMC,SAAS4B,OAAS,IADb,CAAAc,EAAAE,KAAA,QAElBjC,EAAKC,SAAS,SAAA+B,GAAI,MAAI,CACpB3C,SAAQ,GAAAgC,OAAAnB,OAAAgC,EAAA,EAAAhC,CAAM8B,EAAK3C,UAAX,CAAqBkC,IAC7B9B,MAAO,GACPC,KAAM,GACNH,MAAO,MANSwC,EAAAE,KAAA,sBAAAF,EAAAE,KAAA,EASZjC,EAAKC,SAAS,SAAA+B,GAAI,MAAI,CAC1BvC,MAAO,GACPC,KAAM,GACNH,MAAO,GACPC,KAAMwC,EAAKxC,OAASwC,EAAK1C,eAAiB0C,EAAKxC,KAAK,EAAkB,IAAdwC,EAAKxC,KAAauB,KAAKoB,MAAMH,EAAK1C,eAAe,GAAK0C,EAAK1C,eACnHA,eAAyC,KAAzB0C,EAAK3C,SAAS4B,OAAgBF,KAAKoB,MAAMH,EAAK1C,eAAe,GAAK0C,EAAK1C,kBAdvE,OAgBlBU,EAAKoB,oBAhBa,wBAAAW,EAAAK,SAAAT,EAAAU,iEAoBtBC,kDAAc,SAAAC,EAAMxC,GAAN,OAAA6B,EAAAC,EAAAC,KAAA,SAAAU,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,UACZlC,EAAE0C,UACoB,aAAlB1C,EAAEK,OAAOsC,KAFD,CAAAF,EAAAP,KAAA,eAAAO,EAAAP,KAAA,EAGLjC,EAAKC,SAAS,CAClBT,MAAOO,EAAEK,OAAOV,OAJP,OAAA8C,EAAAP,KAAA,mBAMgB,aAAlBlC,EAAEK,OAAOsC,KANP,CAAAF,EAAAP,KAAA,cAORjC,EAAKZ,MAAMI,KAAOQ,EAAKZ,MAAME,gBAPrB,CAAAkD,EAAAP,KAAA,gBAAAO,EAAAP,KAAA,GAQHjC,EAAKC,SAAS,SAAA+B,GAAI,MAAK,CAC5BxC,KAAMwC,EAAKxC,KAAK,KATR,QAAAgD,EAAAP,KAAA,oBAYgB,aAAlBlC,EAAEK,OAAOsC,KAZP,CAAAF,EAAAP,KAAA,cAaRjC,EAAKZ,MAAMI,KAAO,GAbV,CAAAgD,EAAAP,KAAA,gBAAAO,EAAAP,KAAA,GAcJjC,EAAKC,SAAS,SAAA+B,GAAI,MAAK,CAC3BxC,KAAMwC,EAAKxC,KAAK,KAfR,QAmBbQ,EAAKoB,oBAnBQ,yBAAAoB,EAAAJ,SAAAG,EAAAF,iEAsBdM,eAAe,WACV3C,EAAKZ,MAAMO,WACZgB,IAAMC,IAAN,6CAAAS,OAAuDrB,EAAKZ,MAAMO,YACjEkB,KAAK,SAAAC,GAAI,OAAId,EAAKC,SAAS,CAACL,cAAe,CAACkB,EAAKA,MAAOjB,WAAY,OACpEqB,MAAM,kBAAMlB,EAAKC,SAAS,CAACJ,WAAY,4DAI5C+C,oBAAoB,WAClB5C,EAAKC,SAAS,CACZL,cAAe,KACfD,UAAW,GACXE,WAAY,8EAIP,IAAAgD,EAC8FR,KAAKjD,MADnGyD,EACCrD,KADDqD,EACOxD,SADPwD,EACiBtD,MADjBsD,EACwBpD,MADxBoD,EAC+BnD,KAD/BmD,EACqCvD,eADrCuD,EACqDlD,UADrDkD,EACgEjD,cADhEiD,EAC+EhD,WACtF,OACEiD,EAAAjB,EAAAkB,cAAA,OAAKC,UAAU,WAAf,4FAvHYC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECXNC,IAASC,OACGV,EAAAjB,EAAAkB,cAACU,EAAD,MACVC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.2e1e7a53.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Header, Dimmer, Loader, Segment, Pagination, Item, Form, Button } from 'semantic-ui-react'\r\nimport SingleMessage from './SingleMessage/SingleMessage'\r\nimport Forms from './Form/Form'\r\nimport './App.css'\r\nimport axios from 'axios'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  state = { \r\n    messages: null,\r\n    messagesLength: 0,\r\n    error: '',\r\n    page: 1,\r\n    email: '',\r\n    text: '',\r\n    messageId: '',\r\n    singleMessage: null,\r\n    seachError: '',\r\n  }\r\n\r\n  // componentDidMount() {\r\n  //   this.getAllMessages()\r\n  //   this.getMessagesByPage(this.state.page)\r\n  // }\r\n\r\n  handlerChange = (e) => {\r\n    this.setState({\r\n       [e.target.name] : e.target.value\r\n    })\r\n  }\r\n\r\n  handleKeyDown = (e) => {\r\n    if (e.keyCode === 13) {\r\n        this.postMessage(e);\r\n    }\r\n  }\r\n\r\n  getAllMessages = () => {\r\n    axios.get(`http://localhost:3002/api/messages`)\r\n      .then(data => this.setState({messagesLength: Math.ceil(data.data.length/10)}))\r\n      .catch(err => this.setState({error: err}))\r\n  }\r\n\r\n  getMessagesByPage = () => {\r\n    axios.get(`http://localhost:3002/api/messages/list/${this.state.page}`)\r\n      .then(data => this.setState({messages: data.data}))\r\n      .catch(err => this.setState({error: err}))\r\n  }\r\n\r\n  postMessage = (e) => {\r\n    e.preventDefault()\r\n    let message = {\r\n      email: this.state.email,\r\n      text: this.state.text,\r\n    }\r\n   this.sendMessageToDb(message)\r\n  }\r\n\r\n  sendMessageToDb = (message) => {\r\n    axios.post('http://localhost:3002/api/messages/', message)\r\n      .then(data => this.checkMessagesLength(data.data))\r\n      .catch(() => this.setState({error: 'Validation faild! Your email isn\\'t correct or message length more then 100 symbols, try again.'}))\r\n  } \r\n\r\n  checkMessagesLength = async(message) => {\r\n    if (this.state.messages.length < 10) {\r\n      this.setState(prev =>({\r\n        messages: [...prev.messages, message],\r\n        email: '',\r\n        text: '',\r\n        error: '',\r\n      }))\r\n    } else{\r\n      await this.setState(prev =>({\r\n        email: '',\r\n        text: '',\r\n        error: '',\r\n        page: prev.page === prev.messagesLength ? prev.page+1 : prev.page === 1 ? Math.floor(prev.messagesLength+1) : prev.messagesLength,\r\n        messagesLength: prev.messages.length === 10 ? Math.floor(prev.messagesLength+1) : prev.messagesLength,\r\n      }))\r\n      this.getMessagesByPage()\r\n    }\r\n  }\r\n\r\n  showNewPage = async(e) => {\r\n    e.persist()\r\n    if (e.target.type === 'pageItem'){\r\n     await this.setState({\r\n       page: +e.target.text\r\n     })\r\n   } else if (e.target.type === 'nextItem') {\r\n     if(this.state.page < this.state.messagesLength) {\r\n       await this.setState(prev => ({\r\n        page: prev.page+1\r\n      }))\r\n     }\r\n   } else if (e.target.type === 'prevItem') {\r\n     if(this.state.page > 1) {\r\n      await this.setState(prev => ({\r\n        page: prev.page-1\r\n      }))\r\n     }\r\n   }\r\n   this.getMessagesByPage()\r\n  }\r\n\r\n  getMessageById=()=> {\r\n    if(this.state.messageId){\r\n      axios.get(`http://localhost:3002/api/messages/single/${this.state.messageId}`)\r\n      .then(data => this.setState({singleMessage: [data.data], seachError: ''}))\r\n      .catch(() => this.setState({seachError: 'Sorry, can\\'t find message with this ID, try again.'}))\r\n    }\r\n  }\r\n\r\n  removeSingleMessage=()=>{\r\n    this.setState({\r\n      singleMessage: null,\r\n      messageId: '',\r\n      seachError: '',\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { page, messages, error, email, text, messagesLength, messageId, singleMessage, seachError } = this.state\r\n    return (\r\n      <div className='wrapper'>\r\n        {/* <div className='main-title'> \r\n          <Header as='h2' content='Test DB2 Limited'/>\r\n        </div>\r\n        <div className='pagin-wrap'>\r\n          <Pagination\r\n          activePage={page}\r\n          firstItem={null}\r\n          lastItem={null}\r\n          pointing\r\n          secondary\r\n          onClick={this.showNewPage}\r\n          totalPages={messagesLength}\r\n          />\r\n        </div>\r\n        <div className='seach-wrapper'>\r\n          <Form style={{display:'flex', alignItems: 'center', justyfyContent: 'space-evenly'}}>\r\n            <Form.Field style={{marginTop:'1rem'}}>\r\n              <input value={messageId} placeholder='Get Message By ID' name='messageId' onChange={this.handlerChange}/>\r\n            </Form.Field>\r\n            <Button positive type='submit' onClick={this.getMessageById}>Seach</Button>\r\n            <Button negative onClick={this.removeSingleMessage}>Reset</Button>\r\n          </Form>\r\n          <Item style={{color:'red', textAlign: 'center'}}>{seachError}</Item> \r\n        </div>\r\n        <div className='message-wrapper'>\r\n          { messages === null ? \r\n              <Segment style={{padding: '13.8rem 0'}}>\r\n                    <Dimmer active inverted>\r\n                        <Loader inverted> Loading ...</Loader>\r\n                    </Dimmer>\r\n                </Segment>:\r\n            !singleMessage && messages.length !== 0 ? messages.map(el => <SingleMessage key={el._id} id={el._id} email={el.email} text={el.text}/>) : singleMessage ? singleMessage.map(el => <SingleMessage key={el._id} id={el._id} email={el.email} text={el.text}/>) : <div style={{color:'red', textAlign: 'center'}}> No messages yet</div>\r\n          }\r\n          <Item className='error'>{error}</Item> \r\n        </div>\r\n        <div className='form-wrapper'> \r\n          <Forms email={email} text={text} handlerChange={this.handlerChange} handleKeyDown={this.handleKeyDown} postMessage={this.postMessage}/>\r\n        </div> */}\r\n        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAa\r\n      </div>    \r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n            <App />\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}